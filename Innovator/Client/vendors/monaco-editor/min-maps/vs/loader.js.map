{"version":3,"sources":["vs/vs/loader.js"],"names":["_amdLoaderGlobal","this","_commonjsGlobal","global","AMDLoader","Environment","_detected","_isWindows","_isNode","_isElectronRenderer","_isWebWorker","Object","defineProperty","prototype","get","_detect","enumerable","configurable","module","exports","process","versions","electron","type","importScripts","navigator","userAgent","indexOf","platform","LoaderEvent","detail","timestamp","LoaderEventRecorder","loaderAvailableTimestamp","_events","record","push","Utilities","getHighPerformanceTimestamp","getEvents","NullLoaderEventRecorder","INSTANCE","fileUriToFilePath","isWindows","uri","decodeURI","replace","test","substr","startsWith","haystack","needle","length","endsWith","containsQueryString","url","isAbsolutePath","forEachProperty","obj","callback","key","hasOwnProperty","isEmpty","recursiveClone","result","Array","isArray","value","generateAnonymousModule","NEXT_ANONYMOUS_ID","isAnonymousModule","id","PERFORMANCE_NOW_PROBED","HAS_PERFORMANCE_NOW","performance","now","Date","ConfigurationOptionsUtil","validateConfigurationOptions","options","defaultOnError","err","errorCode","console","error","moduleId","stack","neededBy","baseUrl","isBuild","paths","config","catchError","urlArgs","onError","ignoreDuplicateModules","cspNonce","nodeModules","nodeCachedData","seed","writeDelay","onData","warn","path","undefined","mergeConfigurationOptions","overwrite","base","concat","key2","value2","Configuration","env","_env","_createIgnoreDuplicateModulesMap","_createNodeModulesMap","_createSortedPathsRules","nodeRequire","main","filename","isNode","nodeMain","dirnameIndex","Math","max","lastIndexOf","substring","ignoreDuplicateModulesMap","i","nodeModulesMap","create","_i","_a","nodeModule","_this","sortedPathsRules","from","to","sort","a","b","cloneAndMerge","getOptionsLiteral","_applyPaths","pathRule","len","j","lenJ","_addUrlArgsToUrl","_addUrlArgsIfNecessaryToUrl","_addUrlArgsIfNecessaryToUrls","urls","moduleIdToPaths","results","requireToUrl","isDuplicateMessageIgnoredFor","getConfigForModule","shouldCatchError","shouldRecordStats","recordStats","OnlyOnceScriptLoader","_scriptLoader","_callbackMap","load","moduleManager","scriptSrc","errorback","isWebWorker","WorkerScriptLoader","NodeScriptLoader","BrowserScriptLoader","scriptCallbacks","triggerCallback","triggerErrorback","attachListeners","script","unbind","removeEventListener","loadEventListener","errorEventListener","e","addEventListener","document","createElement","setAttribute","getConfig","getElementsByTagName","appendChild","_didInitialize","_didPatchNodeRequire","_hasCreateCachedData","_init","_fs","_vm","_path","_crypto","Script","_initNodeRequire","that","Module","_compile","content","wrapper","wrap","cachedDataPath","_getCachedDataPath","cachedData","readFileSync","produceCachedData","compileWrapper","runInThisContext","dirname","require","mod","constructor","resolve","request","_resolveFilename","mainModule","extensions","_extensions","cache","_cache","makeRequireFunction","args","Buffer","apply","_processCachedData","opts","nodeInstrumenter","c","recorder","getRecorder","pieces","split","moduleExports_1","enqueueDefineAnonymousModule","readFile","encoding","data","normalizedScriptSrc","normalize","vmScriptSrc","isElectronRenderer","driveLetterMatch","match","toUpperCase","contents","prefix","charCodeAt","_BOM","cachedDataPath_1","_err","_loadAndEvalScript","r","globalDefineFunc","getGlobalAMDDefineFunc","receivedDefineCall","localDefineFunc","arguments","amd","call","getGlobalAMDRequireFunc","Error","basedir","hash","createHash","update","digest","basename","join","createCachedData","cachedDataRejected","_runSoon","unlink","cachedDataProduced","writeFile","minTimeout","timeout","ceil","random","setTimeout","createScriptLoader","ModuleIdResolver","fromModuleId","lastSlash","fromModulePath","_normalizeModuleId","pattern","resolveModule","ROOT","strId","dependencies","moduleIdResolver","_callback","_errorback","exportsPassedIn","unresolvedDependenciesCount","_isComplete","_safeInvokeFunction","returnedValue","producedError","_invokeFactory","strModuleId","dependenciesValues","complete","onDependencyError","isComplete","ModuleIdProvider","_nextId","_strModuleIdToIntModuleId","Map","_intModuleIdToStrModuleId","getModuleId","getMaxModuleId","set","getStrModuleId","RegularDependency","EXPORTS","MODULE","REQUIRE","PluginDependency","pluginId","pluginParam","ModuleManager","scriptLoader","defineFunc","requireFunc","_loaderAvailableTimestamp","_defineFunc","_requireFunc","_moduleIdProvider","_config","_modules2","_knownModules2","_inverseDependencies2","_inversePluginDependencies2","_currentAnnonymousDefineCall","_recorder","_buildInfoPath","_buildInfoDefineStack","_buildInfoDependencies","reset","_findRelevantLocationInStack","str","normalizedPath","stackPieces","m","stackPath","stackLine","stackColumn","trimPathOffset","line","parseInt","col","getBuildInfo","resultLen","location_1","defineStack","defineLocation","shim","getLoaderEvents","defineModule","_normalizeDependencies","map","dep","_resolve","_normalizeDependency","dependency","bangIndex","strPluginId","dependencyId","_relativeRequire","synchronousRequire","_strModuleId","configure","params","shouldOverwrite","oldShouldRecordStats","_onLoad","defineCall","_createLoadError","intModuleId","_onLoadError","seenModuleId","someoneNotified","queue","queueElement","shift","inverseDeps","inverseDep","_hasDependencyPath","fromId","toId","inQueue","dependencyModule","_findCyclePath","depth","_createRequire","toUrl","getStats","__$__nodeRequire","_loadModule","lastPathIndex","loadNextPath","currentPath_1","recorder_1","_loadPluginDependency","plugin","pluginDependency","cyclePath","reverse","inversePluginDeps","_onModuleComplete","inverseDependencyId","inverseDependency","delete","define","init","_nodeRequire_1","what","RequireFunc","DefineFunc","jQuery","_requireFunc_config","doNotInitLoader"],"mappings":"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","file":"loader.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *---------------------------------------------------------------------------------------------\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _amdLoaderGlobal = this;\r\nvar _commonjsGlobal = typeof global === 'object' ? global : {};\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    AMDLoader.global = _amdLoaderGlobal;\r\n    var Environment = (function () {\r\n        function Environment() {\r\n            this._detected = false;\r\n            this._isWindows = false;\r\n            this._isNode = false;\r\n            this._isElectronRenderer = false;\r\n            this._isWebWorker = false;\r\n        }\r\n        Object.defineProperty(Environment.prototype, \"isWindows\", {\r\n            get: function () {\r\n                this._detect();\r\n                return this._isWindows;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Environment.prototype, \"isNode\", {\r\n            get: function () {\r\n                this._detect();\r\n                return this._isNode;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Environment.prototype, \"isElectronRenderer\", {\r\n            get: function () {\r\n                this._detect();\r\n                return this._isElectronRenderer;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(Environment.prototype, \"isWebWorker\", {\r\n            get: function () {\r\n                this._detect();\r\n                return this._isWebWorker;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        Environment.prototype._detect = function () {\r\n            if (this._detected) {\r\n                return;\r\n            }\r\n            this._detected = true;\r\n            this._isWindows = Environment._isWindows();\r\n            this._isNode = (typeof module !== 'undefined' && !!module.exports);\r\n            this._isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\r\n            this._isWebWorker = (typeof AMDLoader.global.importScripts === 'function');\r\n        };\r\n        Environment._isWindows = function () {\r\n            if (typeof navigator !== 'undefined') {\r\n                if (navigator.userAgent && navigator.userAgent.indexOf('Windows') >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (typeof process !== 'undefined') {\r\n                return (process.platform === 'win32');\r\n            }\r\n            return false;\r\n        };\r\n        return Environment;\r\n    }());\r\n    AMDLoader.Environment = Environment;\r\n})(AMDLoader || (AMDLoader = {}));\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    var LoaderEvent = (function () {\r\n        function LoaderEvent(type, detail, timestamp) {\r\n            this.type = type;\r\n            this.detail = detail;\r\n            this.timestamp = timestamp;\r\n        }\r\n        return LoaderEvent;\r\n    }());\r\n    AMDLoader.LoaderEvent = LoaderEvent;\r\n    var LoaderEventRecorder = (function () {\r\n        function LoaderEventRecorder(loaderAvailableTimestamp) {\r\n            this._events = [new LoaderEvent(1 /* LoaderAvailable */, '', loaderAvailableTimestamp)];\r\n        }\r\n        LoaderEventRecorder.prototype.record = function (type, detail) {\r\n            this._events.push(new LoaderEvent(type, detail, AMDLoader.Utilities.getHighPerformanceTimestamp()));\r\n        };\r\n        LoaderEventRecorder.prototype.getEvents = function () {\r\n            return this._events;\r\n        };\r\n        return LoaderEventRecorder;\r\n    }());\r\n    AMDLoader.LoaderEventRecorder = LoaderEventRecorder;\r\n    var NullLoaderEventRecorder = (function () {\r\n        function NullLoaderEventRecorder() {\r\n        }\r\n        NullLoaderEventRecorder.prototype.record = function (type, detail) {\r\n            // Nothing to do\r\n        };\r\n        NullLoaderEventRecorder.prototype.getEvents = function () {\r\n            return [];\r\n        };\r\n        return NullLoaderEventRecorder;\r\n    }());\r\n    NullLoaderEventRecorder.INSTANCE = new NullLoaderEventRecorder();\r\n    AMDLoader.NullLoaderEventRecorder = NullLoaderEventRecorder;\r\n})(AMDLoader || (AMDLoader = {}));\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    var Utilities = (function () {\r\n        function Utilities() {\r\n        }\r\n        /**\r\n         * This method does not take care of / vs \\\r\n         */\r\n        Utilities.fileUriToFilePath = function (isWindows, uri) {\r\n            uri = decodeURI(uri).replace(/%23/g, '#');\r\n            if (isWindows) {\r\n                if (/^file:\\/\\/\\//.test(uri)) {\r\n                    // This is a URI without a hostname => return only the path segment\r\n                    return uri.substr(8);\r\n                }\r\n                if (/^file:\\/\\//.test(uri)) {\r\n                    return uri.substr(5);\r\n                }\r\n            }\r\n            else {\r\n                if (/^file:\\/\\//.test(uri)) {\r\n                    return uri.substr(7);\r\n                }\r\n            }\r\n            // Not sure...\r\n            return uri;\r\n        };\r\n        Utilities.startsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\r\n        };\r\n        Utilities.endsWith = function (haystack, needle) {\r\n            return haystack.length >= needle.length && haystack.substr(haystack.length - needle.length) === needle;\r\n        };\r\n        // only check for \"?\" before \"#\" to ensure that there is a real Query-String\r\n        Utilities.containsQueryString = function (url) {\r\n            return /^[^\\#]*\\?/gi.test(url);\r\n        };\r\n        /**\r\n         * Does `url` start with http:// or https:// or file:// or / ?\r\n         */\r\n        Utilities.isAbsolutePath = function (url) {\r\n            return /^((http:\\/\\/)|(https:\\/\\/)|(file:\\/\\/)|(\\/))/.test(url);\r\n        };\r\n        Utilities.forEachProperty = function (obj, callback) {\r\n            if (obj) {\r\n                var key = void 0;\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        callback(key, obj[key]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        Utilities.isEmpty = function (obj) {\r\n            var isEmpty = true;\r\n            Utilities.forEachProperty(obj, function () {\r\n                isEmpty = false;\r\n            });\r\n            return isEmpty;\r\n        };\r\n        Utilities.recursiveClone = function (obj) {\r\n            if (!obj || typeof obj !== 'object') {\r\n                return obj;\r\n            }\r\n            var result = Array.isArray(obj) ? [] : {};\r\n            Utilities.forEachProperty(obj, function (key, value) {\r\n                if (value && typeof value === 'object') {\r\n                    result[key] = Utilities.recursiveClone(value);\r\n                }\r\n                else {\r\n                    result[key] = value;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        Utilities.generateAnonymousModule = function () {\r\n            return '===anonymous' + (Utilities.NEXT_ANONYMOUS_ID++) + '===';\r\n        };\r\n        Utilities.isAnonymousModule = function (id) {\r\n            return Utilities.startsWith(id, '===anonymous');\r\n        };\r\n        Utilities.getHighPerformanceTimestamp = function () {\r\n            if (!this.PERFORMANCE_NOW_PROBED) {\r\n                this.PERFORMANCE_NOW_PROBED = true;\r\n                this.HAS_PERFORMANCE_NOW = (AMDLoader.global.performance && typeof AMDLoader.global.performance.now === 'function');\r\n            }\r\n            return (this.HAS_PERFORMANCE_NOW ? AMDLoader.global.performance.now() : Date.now());\r\n        };\r\n        return Utilities;\r\n    }());\r\n    Utilities.NEXT_ANONYMOUS_ID = 1;\r\n    Utilities.PERFORMANCE_NOW_PROBED = false;\r\n    Utilities.HAS_PERFORMANCE_NOW = false;\r\n    AMDLoader.Utilities = Utilities;\r\n})(AMDLoader || (AMDLoader = {}));\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    var ConfigurationOptionsUtil = (function () {\r\n        function ConfigurationOptionsUtil() {\r\n        }\r\n        /**\r\n         * Ensure configuration options make sense\r\n         */\r\n        ConfigurationOptionsUtil.validateConfigurationOptions = function (options) {\r\n            function defaultOnError(err) {\r\n                if (err.errorCode === 'load') {\r\n                    console.error('Loading \"' + err.moduleId + '\" failed');\r\n                    console.error('Detail: ', err.detail);\r\n                    if (err.detail && err.detail.stack) {\r\n                        console.error(err.detail.stack);\r\n                    }\r\n                    console.error('Here are the modules that depend on it:');\r\n                    console.error(err.neededBy);\r\n                    return;\r\n                }\r\n                if (err.errorCode === 'factory') {\r\n                    console.error('The factory method of \"' + err.moduleId + '\" has thrown an exception');\r\n                    console.error(err.detail);\r\n                    if (err.detail && err.detail.stack) {\r\n                        console.error(err.detail.stack);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            options = options || {};\r\n            if (typeof options.baseUrl !== 'string') {\r\n                options.baseUrl = '';\r\n            }\r\n            if (typeof options.isBuild !== 'boolean') {\r\n                options.isBuild = false;\r\n            }\r\n            if (typeof options.paths !== 'object') {\r\n                options.paths = {};\r\n            }\r\n            if (typeof options.config !== 'object') {\r\n                options.config = {};\r\n            }\r\n            if (typeof options.catchError === 'undefined') {\r\n                options.catchError = false;\r\n            }\r\n            if (typeof options.urlArgs !== 'string') {\r\n                options.urlArgs = '';\r\n            }\r\n            if (typeof options.onError !== 'function') {\r\n                options.onError = defaultOnError;\r\n            }\r\n            if (typeof options.ignoreDuplicateModules !== 'object' || !Array.isArray(options.ignoreDuplicateModules)) {\r\n                options.ignoreDuplicateModules = [];\r\n            }\r\n            if (options.baseUrl.length > 0) {\r\n                if (!AMDLoader.Utilities.endsWith(options.baseUrl, '/')) {\r\n                    options.baseUrl += '/';\r\n                }\r\n            }\r\n            if (typeof options.cspNonce !== 'string') {\r\n                options.cspNonce = '';\r\n            }\r\n            if (!Array.isArray(options.nodeModules)) {\r\n                options.nodeModules = [];\r\n            }\r\n            if (typeof options.nodeCachedData === 'object') {\r\n                if (typeof options.nodeCachedData.seed !== 'string') {\r\n                    options.nodeCachedData.seed = 'seed';\r\n                }\r\n                if (typeof options.nodeCachedData.writeDelay !== 'number' || options.nodeCachedData.writeDelay < 0) {\r\n                    options.nodeCachedData.writeDelay = 1000 * 7;\r\n                }\r\n                if (typeof options.nodeCachedData.onData !== 'function') {\r\n                    options.nodeCachedData.onData = function (err) {\r\n                        if (err && err.errorCode === 'cachedDataRejected') {\r\n                            console.warn('Rejected cached data from file: ' + err.path);\r\n                        }\r\n                        else if (err && err.errorCode) {\r\n                            console.error('Problems handling cached data file: ' + err.path);\r\n                            console.error(err.detail);\r\n                        }\r\n                        else if (err) {\r\n                            console.error(err);\r\n                        }\r\n                    };\r\n                }\r\n                if (!options.nodeCachedData.path || typeof options.nodeCachedData.path !== 'string') {\r\n                    options.nodeCachedData.onData('INVALID cached data configuration, \\'path\\' MUST be set');\r\n                    options.nodeCachedData = undefined;\r\n                }\r\n            }\r\n            return options;\r\n        };\r\n        ConfigurationOptionsUtil.mergeConfigurationOptions = function (overwrite, base) {\r\n            if (overwrite === void 0) { overwrite = null; }\r\n            if (base === void 0) { base = null; }\r\n            var result = AMDLoader.Utilities.recursiveClone(base || {});\r\n            // Merge known properties and overwrite the unknown ones\r\n            AMDLoader.Utilities.forEachProperty(overwrite, function (key, value) {\r\n                if (key === 'ignoreDuplicateModules' && typeof result.ignoreDuplicateModules !== 'undefined') {\r\n                    result.ignoreDuplicateModules = result.ignoreDuplicateModules.concat(value);\r\n                }\r\n                else if (key === 'paths' && typeof result.paths !== 'undefined') {\r\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.paths[key2] = value2; });\r\n                }\r\n                else if (key === 'config' && typeof result.config !== 'undefined') {\r\n                    AMDLoader.Utilities.forEachProperty(value, function (key2, value2) { return result.config[key2] = value2; });\r\n                }\r\n                else {\r\n                    result[key] = AMDLoader.Utilities.recursiveClone(value);\r\n                }\r\n            });\r\n            return ConfigurationOptionsUtil.validateConfigurationOptions(result);\r\n        };\r\n        return ConfigurationOptionsUtil;\r\n    }());\r\n    AMDLoader.ConfigurationOptionsUtil = ConfigurationOptionsUtil;\r\n    var Configuration = (function () {\r\n        function Configuration(env, options) {\r\n            this._env = env;\r\n            this.options = ConfigurationOptionsUtil.mergeConfigurationOptions(options);\r\n            this._createIgnoreDuplicateModulesMap();\r\n            this._createNodeModulesMap();\r\n            this._createSortedPathsRules();\r\n            if (this.options.baseUrl === '') {\r\n                if (this.options.nodeRequire && this.options.nodeRequire.main && this.options.nodeRequire.main.filename && this._env.isNode) {\r\n                    var nodeMain = this.options.nodeRequire.main.filename;\r\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\r\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\r\n                }\r\n                if (this.options.nodeMain && this._env.isNode) {\r\n                    var nodeMain = this.options.nodeMain;\r\n                    var dirnameIndex = Math.max(nodeMain.lastIndexOf('/'), nodeMain.lastIndexOf('\\\\'));\r\n                    this.options.baseUrl = nodeMain.substring(0, dirnameIndex + 1);\r\n                }\r\n            }\r\n        }\r\n        Configuration.prototype._createIgnoreDuplicateModulesMap = function () {\r\n            // Build a map out of the ignoreDuplicateModules array\r\n            this.ignoreDuplicateModulesMap = {};\r\n            for (var i = 0; i < this.options.ignoreDuplicateModules.length; i++) {\r\n                this.ignoreDuplicateModulesMap[this.options.ignoreDuplicateModules[i]] = true;\r\n            }\r\n        };\r\n        Configuration.prototype._createNodeModulesMap = function () {\r\n            // Build a map out of nodeModules array\r\n            this.nodeModulesMap = Object.create(null);\r\n            for (var _i = 0, _a = this.options.nodeModules; _i < _a.length; _i++) {\r\n                var nodeModule = _a[_i];\r\n                this.nodeModulesMap[nodeModule] = true;\r\n            }\r\n        };\r\n        Configuration.prototype._createSortedPathsRules = function () {\r\n            var _this = this;\r\n            // Create an array our of the paths rules, sorted descending by length to\r\n            // result in a more specific -> less specific order\r\n            this.sortedPathsRules = [];\r\n            AMDLoader.Utilities.forEachProperty(this.options.paths, function (from, to) {\r\n                if (!Array.isArray(to)) {\r\n                    _this.sortedPathsRules.push({\r\n                        from: from,\r\n                        to: [to]\r\n                    });\r\n                }\r\n                else {\r\n                    _this.sortedPathsRules.push({\r\n                        from: from,\r\n                        to: to\r\n                    });\r\n                }\r\n            });\r\n            this.sortedPathsRules.sort(function (a, b) {\r\n                return b.from.length - a.from.length;\r\n            });\r\n        };\r\n        /**\r\n         * Clone current configuration and overwrite options selectively.\r\n         * @param options The selective options to overwrite with.\r\n         * @result A new configuration\r\n         */\r\n        Configuration.prototype.cloneAndMerge = function (options) {\r\n            return new Configuration(this._env, ConfigurationOptionsUtil.mergeConfigurationOptions(options, this.options));\r\n        };\r\n        /**\r\n         * Get current options bag. Useful for passing it forward to plugins.\r\n         */\r\n        Configuration.prototype.getOptionsLiteral = function () {\r\n            return this.options;\r\n        };\r\n        Configuration.prototype._applyPaths = function (moduleId) {\r\n            var pathRule;\r\n            for (var i = 0, len = this.sortedPathsRules.length; i < len; i++) {\r\n                pathRule = this.sortedPathsRules[i];\r\n                if (AMDLoader.Utilities.startsWith(moduleId, pathRule.from)) {\r\n                    var result = [];\r\n                    for (var j = 0, lenJ = pathRule.to.length; j < lenJ; j++) {\r\n                        result.push(pathRule.to[j] + moduleId.substr(pathRule.from.length));\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n            return [moduleId];\r\n        };\r\n        Configuration.prototype._addUrlArgsToUrl = function (url) {\r\n            if (AMDLoader.Utilities.containsQueryString(url)) {\r\n                return url + '&' + this.options.urlArgs;\r\n            }\r\n            else {\r\n                return url + '?' + this.options.urlArgs;\r\n            }\r\n        };\r\n        Configuration.prototype._addUrlArgsIfNecessaryToUrl = function (url) {\r\n            if (this.options.urlArgs) {\r\n                return this._addUrlArgsToUrl(url);\r\n            }\r\n            return url;\r\n        };\r\n        Configuration.prototype._addUrlArgsIfNecessaryToUrls = function (urls) {\r\n            if (this.options.urlArgs) {\r\n                for (var i = 0, len = urls.length; i < len; i++) {\r\n                    urls[i] = this._addUrlArgsToUrl(urls[i]);\r\n                }\r\n            }\r\n            return urls;\r\n        };\r\n        /**\r\n         * Transform a module id to a location. Appends .js to module ids\r\n         */\r\n        Configuration.prototype.moduleIdToPaths = function (moduleId) {\r\n            if (this.nodeModulesMap[moduleId] === true) {\r\n                // This is a node module...\r\n                if (this.isBuild()) {\r\n                    // ...and we are at build time, drop it\r\n                    return ['empty:'];\r\n                }\r\n                else {\r\n                    // ...and at runtime we create a `shortcut`-path\r\n                    return ['node|' + moduleId];\r\n                }\r\n            }\r\n            var result = moduleId;\r\n            var results;\r\n            if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.isAbsolutePath(result)) {\r\n                results = this._applyPaths(result);\r\n                for (var i = 0, len = results.length; i < len; i++) {\r\n                    if (this.isBuild() && results[i] === 'empty:') {\r\n                        continue;\r\n                    }\r\n                    if (!AMDLoader.Utilities.isAbsolutePath(results[i])) {\r\n                        results[i] = this.options.baseUrl + results[i];\r\n                    }\r\n                    if (!AMDLoader.Utilities.endsWith(results[i], '.js') && !AMDLoader.Utilities.containsQueryString(results[i])) {\r\n                        results[i] = results[i] + '.js';\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (!AMDLoader.Utilities.endsWith(result, '.js') && !AMDLoader.Utilities.containsQueryString(result)) {\r\n                    result = result + '.js';\r\n                }\r\n                results = [result];\r\n            }\r\n            return this._addUrlArgsIfNecessaryToUrls(results);\r\n        };\r\n        /**\r\n         * Transform a module id or url to a location.\r\n         */\r\n        Configuration.prototype.requireToUrl = function (url) {\r\n            var result = url;\r\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\r\n                result = this._applyPaths(result)[0];\r\n                if (!AMDLoader.Utilities.isAbsolutePath(result)) {\r\n                    result = this.options.baseUrl + result;\r\n                }\r\n            }\r\n            return this._addUrlArgsIfNecessaryToUrl(result);\r\n        };\r\n        /**\r\n         * Flag to indicate if current execution is as part of a build.\r\n         */\r\n        Configuration.prototype.isBuild = function () {\r\n            return this.options.isBuild;\r\n        };\r\n        /**\r\n         * Test if module `moduleId` is expected to be defined multiple times\r\n         */\r\n        Configuration.prototype.isDuplicateMessageIgnoredFor = function (moduleId) {\r\n            return this.ignoreDuplicateModulesMap.hasOwnProperty(moduleId);\r\n        };\r\n        /**\r\n         * Get the configuration settings for the provided module id\r\n         */\r\n        Configuration.prototype.getConfigForModule = function (moduleId) {\r\n            if (this.options.config) {\r\n                return this.options.config[moduleId];\r\n            }\r\n        };\r\n        /**\r\n         * Should errors be caught when executing module factories?\r\n         */\r\n        Configuration.prototype.shouldCatchError = function () {\r\n            return this.options.catchError;\r\n        };\r\n        /**\r\n         * Should statistics be recorded?\r\n         */\r\n        Configuration.prototype.shouldRecordStats = function () {\r\n            return this.options.recordStats;\r\n        };\r\n        /**\r\n         * Forward an error to the error handler.\r\n         */\r\n        Configuration.prototype.onError = function (err) {\r\n            this.options.onError(err);\r\n        };\r\n        return Configuration;\r\n    }());\r\n    AMDLoader.Configuration = Configuration;\r\n})(AMDLoader || (AMDLoader = {}));\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    /**\r\n     * Load `scriptSrc` only once (avoid multiple <script> tags)\r\n     */\r\n    var OnlyOnceScriptLoader = (function () {\r\n        function OnlyOnceScriptLoader(env) {\r\n            this._env = env;\r\n            this._scriptLoader = null;\r\n            this._callbackMap = {};\r\n        }\r\n        OnlyOnceScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\r\n            var _this = this;\r\n            if (!this._scriptLoader) {\r\n                this._scriptLoader = (this._env.isWebWorker\r\n                    ? new WorkerScriptLoader()\r\n                    : this._env.isNode\r\n                        ? new NodeScriptLoader(this._env)\r\n                        : new BrowserScriptLoader());\r\n            }\r\n            var scriptCallbacks = {\r\n                callback: callback,\r\n                errorback: errorback\r\n            };\r\n            if (this._callbackMap.hasOwnProperty(scriptSrc)) {\r\n                this._callbackMap[scriptSrc].push(scriptCallbacks);\r\n                return;\r\n            }\r\n            this._callbackMap[scriptSrc] = [scriptCallbacks];\r\n            this._scriptLoader.load(moduleManager, scriptSrc, function () { return _this.triggerCallback(scriptSrc); }, function (err) { return _this.triggerErrorback(scriptSrc, err); });\r\n        };\r\n        OnlyOnceScriptLoader.prototype.triggerCallback = function (scriptSrc) {\r\n            var scriptCallbacks = this._callbackMap[scriptSrc];\r\n            delete this._callbackMap[scriptSrc];\r\n            for (var i = 0; i < scriptCallbacks.length; i++) {\r\n                scriptCallbacks[i].callback();\r\n            }\r\n        };\r\n        OnlyOnceScriptLoader.prototype.triggerErrorback = function (scriptSrc, err) {\r\n            var scriptCallbacks = this._callbackMap[scriptSrc];\r\n            delete this._callbackMap[scriptSrc];\r\n            for (var i = 0; i < scriptCallbacks.length; i++) {\r\n                scriptCallbacks[i].errorback(err);\r\n            }\r\n        };\r\n        return OnlyOnceScriptLoader;\r\n    }());\r\n    var BrowserScriptLoader = (function () {\r\n        function BrowserScriptLoader() {\r\n        }\r\n        /**\r\n         * Attach load / error listeners to a script element and remove them when either one has fired.\r\n         * Implemented for browssers supporting HTML5 standard 'load' and 'error' events.\r\n         */\r\n        BrowserScriptLoader.prototype.attachListeners = function (script, callback, errorback) {\r\n            var unbind = function () {\r\n                script.removeEventListener('load', loadEventListener);\r\n                script.removeEventListener('error', errorEventListener);\r\n            };\r\n            var loadEventListener = function (e) {\r\n                unbind();\r\n                callback();\r\n            };\r\n            var errorEventListener = function (e) {\r\n                unbind();\r\n                errorback(e);\r\n            };\r\n            script.addEventListener('load', loadEventListener);\r\n            script.addEventListener('error', errorEventListener);\r\n        };\r\n        BrowserScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\r\n            var script = document.createElement('script');\r\n            script.setAttribute('async', 'async');\r\n            script.setAttribute('type', 'text/javascript');\r\n            this.attachListeners(script, callback, errorback);\r\n            script.setAttribute('src', scriptSrc);\r\n            // Propagate CSP nonce to dynamically created script tag.\r\n            var cspNonce = moduleManager.getConfig().getOptionsLiteral().cspNonce;\r\n            if (cspNonce) {\r\n                script.setAttribute('nonce', cspNonce);\r\n            }\r\n            document.getElementsByTagName('head')[0].appendChild(script);\r\n        };\r\n        return BrowserScriptLoader;\r\n    }());\r\n    var WorkerScriptLoader = (function () {\r\n        function WorkerScriptLoader() {\r\n        }\r\n        WorkerScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\r\n            try {\r\n                importScripts(scriptSrc);\r\n                callback();\r\n            }\r\n            catch (e) {\r\n                errorback(e);\r\n            }\r\n        };\r\n        return WorkerScriptLoader;\r\n    }());\r\n    var NodeScriptLoader = (function () {\r\n        function NodeScriptLoader(env) {\r\n            this._env = env;\r\n            this._didInitialize = false;\r\n            this._didPatchNodeRequire = false;\r\n            this._hasCreateCachedData = false;\r\n        }\r\n        NodeScriptLoader.prototype._init = function (nodeRequire) {\r\n            if (this._didInitialize) {\r\n                return;\r\n            }\r\n            this._didInitialize = true;\r\n            // capture node modules\r\n            this._fs = nodeRequire('fs');\r\n            this._vm = nodeRequire('vm');\r\n            this._path = nodeRequire('path');\r\n            this._crypto = nodeRequire('crypto');\r\n            // check for `createCachedData`-api\r\n            this._hasCreateCachedData = typeof (new this._vm.Script('').createCachedData) === 'function';\r\n        };\r\n        // patch require-function of nodejs such that we can manually create a script\r\n        // from cached data. this is done by overriding the `Module._compile` function\r\n        NodeScriptLoader.prototype._initNodeRequire = function (nodeRequire, moduleManager) {\r\n            var nodeCachedData = moduleManager.getConfig().getOptionsLiteral().nodeCachedData;\r\n            if (!nodeCachedData || this._didPatchNodeRequire) {\r\n                return;\r\n            }\r\n            this._didPatchNodeRequire = true;\r\n            var that = this;\r\n            var Module = nodeRequire('module');\r\n            function makeRequireFunction(mod) {\r\n                var Module = mod.constructor;\r\n                var require = function require(path) {\r\n                    try {\r\n                        return mod.require(path);\r\n                    }\r\n                    finally {\r\n                        // nothing\r\n                    }\r\n                };\r\n                require.resolve = function resolve(request) {\r\n                    return Module._resolveFilename(request, mod);\r\n                };\r\n                require.main = process.mainModule;\r\n                require.extensions = Module._extensions;\r\n                require.cache = Module._cache;\r\n                return require;\r\n            }\r\n            Module.prototype._compile = function (content, filename) {\r\n                // remove shebang\r\n                content = content.replace(/^#!.*/, '');\r\n                // create wrapper function\r\n                var wrapper = Module.wrap(content);\r\n                var cachedDataPath = that._getCachedDataPath(nodeCachedData.seed, nodeCachedData.path, filename);\r\n                var options = { filename: filename };\r\n                try {\r\n                    options.cachedData = that._fs.readFileSync(cachedDataPath);\r\n                }\r\n                catch (e) {\r\n                    options.produceCachedData = !that._hasCreateCachedData;\r\n                }\r\n                var script = new that._vm.Script(wrapper, options);\r\n                var compileWrapper = script.runInThisContext(options);\r\n                var dirname = that._path.dirname(filename);\r\n                var require = makeRequireFunction(this);\r\n                var args = [this.exports, require, this, filename, dirname, process, _commonjsGlobal, Buffer];\r\n                var result = compileWrapper.apply(this.exports, args);\r\n                that._processCachedData(moduleManager, script, wrapper, cachedDataPath, !options.cachedData);\r\n                return result;\r\n            };\r\n        };\r\n        NodeScriptLoader.prototype.load = function (moduleManager, scriptSrc, callback, errorback) {\r\n            var _this = this;\r\n            var opts = moduleManager.getConfig().getOptionsLiteral();\r\n            var nodeRequire = (opts.nodeRequire || AMDLoader.global.nodeRequire);\r\n            var nodeInstrumenter = (opts.nodeInstrumenter || function (c) { return c; });\r\n            this._init(nodeRequire);\r\n            this._initNodeRequire(nodeRequire, moduleManager);\r\n            var recorder = moduleManager.getRecorder();\r\n            if (/^node\\|/.test(scriptSrc)) {\r\n                var pieces = scriptSrc.split('|');\r\n                var moduleExports_1 = null;\r\n                try {\r\n                    moduleExports_1 = nodeRequire(pieces[1]);\r\n                }\r\n                catch (err) {\r\n                    errorback(err);\r\n                    return;\r\n                }\r\n                moduleManager.enqueueDefineAnonymousModule([], function () { return moduleExports_1; });\r\n                callback();\r\n            }\r\n            else {\r\n                scriptSrc = AMDLoader.Utilities.fileUriToFilePath(this._env.isWindows, scriptSrc);\r\n                this._fs.readFile(scriptSrc, { encoding: 'utf8' }, function (err, data) {\r\n                    if (err) {\r\n                        errorback(err);\r\n                        return;\r\n                    }\r\n                    var normalizedScriptSrc = _this._path.normalize(scriptSrc);\r\n                    var vmScriptSrc = normalizedScriptSrc;\r\n                    // Make the script src friendly towards electron\r\n                    if (_this._env.isElectronRenderer) {\r\n                        var driveLetterMatch = vmScriptSrc.match(/^([a-z])\\:(.*)/i);\r\n                        if (driveLetterMatch) {\r\n                            // windows\r\n                            vmScriptSrc = \"file:///\" + (driveLetterMatch[1].toUpperCase() + ':' + driveLetterMatch[2]).replace(/\\\\/g, '/');\r\n                        }\r\n                        else {\r\n                            // nix\r\n                            vmScriptSrc = \"file://\" + vmScriptSrc;\r\n                        }\r\n                    }\r\n                    var contents, prefix = '(function (require, define, __filename, __dirname) { ', suffix = '\\n});';\r\n                    if (data.charCodeAt(0) === NodeScriptLoader._BOM) {\r\n                        contents = prefix + data.substring(1) + suffix;\r\n                    }\r\n                    else {\r\n                        contents = prefix + data + suffix;\r\n                    }\r\n                    contents = nodeInstrumenter(contents, normalizedScriptSrc);\r\n                    if (!opts.nodeCachedData) {\r\n                        _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, { filename: vmScriptSrc }, recorder, callback, errorback);\r\n                    }\r\n                    else {\r\n                        var cachedDataPath_1 = _this._getCachedDataPath(opts.nodeCachedData.seed, opts.nodeCachedData.path, scriptSrc);\r\n                        _this._fs.readFile(cachedDataPath_1, function (_err, cachedData) {\r\n                            // create script options\r\n                            var options = {\r\n                                filename: vmScriptSrc,\r\n                                produceCachedData: !_this._hasCreateCachedData && typeof cachedData === 'undefined',\r\n                                cachedData: cachedData\r\n                            };\r\n                            var script = _this._loadAndEvalScript(moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback);\r\n                            _this._processCachedData(moduleManager, script, contents, cachedDataPath_1, !options.cachedData);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        NodeScriptLoader.prototype._loadAndEvalScript = function (moduleManager, scriptSrc, vmScriptSrc, contents, options, recorder, callback, errorback) {\r\n            // create script, run script\r\n            recorder.record(31 /* NodeBeginEvaluatingScript */, scriptSrc);\r\n            var script = new this._vm.Script(contents, options);\r\n            var r = script.runInThisContext(options);\r\n            var globalDefineFunc = moduleManager.getGlobalAMDDefineFunc();\r\n            var receivedDefineCall = false;\r\n            var localDefineFunc = function () {\r\n                receivedDefineCall = true;\r\n                return globalDefineFunc.apply(null, arguments);\r\n            };\r\n            localDefineFunc.amd = globalDefineFunc.amd;\r\n            r.call(AMDLoader.global, moduleManager.getGlobalAMDRequireFunc(), localDefineFunc, vmScriptSrc, this._path.dirname(scriptSrc));\r\n            // signal done\r\n            recorder.record(32 /* NodeEndEvaluatingScript */, scriptSrc);\r\n            if (receivedDefineCall) {\r\n                callback();\r\n            }\r\n            else {\r\n                errorback(new Error(\"Didn't receive define call in \" + scriptSrc + \"!\"));\r\n            }\r\n            return script;\r\n        };\r\n        NodeScriptLoader.prototype._getCachedDataPath = function (seed, basedir, filename) {\r\n            var hash = this._crypto.createHash('md5').update(filename, 'utf8').update(seed, 'utf8').digest('hex');\r\n            var basename = this._path.basename(filename).replace(/\\.js$/, '');\r\n            return this._path.join(basedir, basename + \"-\" + hash + \".code\");\r\n        };\r\n        NodeScriptLoader.prototype._processCachedData = function (moduleManager, script, contents, cachedDataPath, createCachedData) {\r\n            var _this = this;\r\n            if (script.cachedDataRejected) {\r\n                // data rejected => delete cache file\r\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\r\n                    errorCode: 'cachedDataRejected',\r\n                    path: cachedDataPath\r\n                });\r\n                NodeScriptLoader._runSoon(function () {\r\n                    return _this._fs.unlink(cachedDataPath, function (err) {\r\n                        if (err) {\r\n                            moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\r\n                                errorCode: 'unlink',\r\n                                path: cachedDataPath,\r\n                                detail: err\r\n                            });\r\n                        }\r\n                    });\r\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay / 2);\r\n            }\r\n            else if (script.cachedDataProduced) {\r\n                // data produced => tell outside world\r\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData(undefined, {\r\n                    path: cachedDataPath\r\n                });\r\n                // data produced => write cache file\r\n                NodeScriptLoader._runSoon(function () {\r\n                    return _this._fs.writeFile(cachedDataPath, script.cachedData, function (err) {\r\n                        if (err) {\r\n                            moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\r\n                                errorCode: 'writeFile',\r\n                                path: cachedDataPath,\r\n                                detail: err\r\n                            });\r\n                        }\r\n                    });\r\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay);\r\n            }\r\n            else if (this._hasCreateCachedData && createCachedData) {\r\n                // NEW world\r\n                // data produced => tell outside world\r\n                moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData(undefined, {\r\n                    path: cachedDataPath\r\n                });\r\n                // soon'ish create and save cached data\r\n                NodeScriptLoader._runSoon(function () {\r\n                    var data = script.createCachedData(contents);\r\n                    _this._fs.writeFile(cachedDataPath, data, function (err) {\r\n                        if (!err) {\r\n                            return;\r\n                        }\r\n                        moduleManager.getConfig().getOptionsLiteral().nodeCachedData.onData({\r\n                            errorCode: 'writeFile',\r\n                            path: cachedDataPath,\r\n                            detail: err\r\n                        });\r\n                    });\r\n                }, moduleManager.getConfig().getOptionsLiteral().nodeCachedData.writeDelay);\r\n            }\r\n        };\r\n        NodeScriptLoader._runSoon = function (callback, minTimeout) {\r\n            var timeout = minTimeout + Math.ceil(Math.random() * minTimeout);\r\n            setTimeout(callback, timeout);\r\n        };\r\n        return NodeScriptLoader;\r\n    }());\r\n    NodeScriptLoader._BOM = 0xFEFF;\r\n    function createScriptLoader(env) {\r\n        return new OnlyOnceScriptLoader(env);\r\n    }\r\n    AMDLoader.createScriptLoader = createScriptLoader;\r\n})(AMDLoader || (AMDLoader = {}));\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    // ------------------------------------------------------------------------\r\n    // ModuleIdResolver\r\n    var ModuleIdResolver = (function () {\r\n        function ModuleIdResolver(fromModuleId) {\r\n            var lastSlash = fromModuleId.lastIndexOf('/');\r\n            if (lastSlash !== -1) {\r\n                this.fromModulePath = fromModuleId.substr(0, lastSlash + 1);\r\n            }\r\n            else {\r\n                this.fromModulePath = '';\r\n            }\r\n        }\r\n        /**\r\n         * Normalize 'a/../name' to 'name', etc.\r\n         */\r\n        ModuleIdResolver._normalizeModuleId = function (moduleId) {\r\n            var r = moduleId, pattern;\r\n            // replace /./ => /\r\n            pattern = /\\/\\.\\//;\r\n            while (pattern.test(r)) {\r\n                r = r.replace(pattern, '/');\r\n            }\r\n            // replace ^./ => nothing\r\n            r = r.replace(/^\\.\\//g, '');\r\n            // replace /aa/../ => / (BUT IGNORE /../../)\r\n            pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\r\n            while (pattern.test(r)) {\r\n                r = r.replace(pattern, '/');\r\n            }\r\n            // replace ^aa/../ => nothing (BUT IGNORE ../../)\r\n            r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\r\n            return r;\r\n        };\r\n        /**\r\n         * Resolve relative module ids\r\n         */\r\n        ModuleIdResolver.prototype.resolveModule = function (moduleId) {\r\n            var result = moduleId;\r\n            if (!AMDLoader.Utilities.isAbsolutePath(result)) {\r\n                if (AMDLoader.Utilities.startsWith(result, './') || AMDLoader.Utilities.startsWith(result, '../')) {\r\n                    result = ModuleIdResolver._normalizeModuleId(this.fromModulePath + result);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        return ModuleIdResolver;\r\n    }());\r\n    ModuleIdResolver.ROOT = new ModuleIdResolver('');\r\n    AMDLoader.ModuleIdResolver = ModuleIdResolver;\r\n    // ------------------------------------------------------------------------\r\n    // Module\r\n    var Module = (function () {\r\n        function Module(id, strId, dependencies, callback, errorback, moduleIdResolver) {\r\n            this.id = id;\r\n            this.strId = strId;\r\n            this.dependencies = dependencies;\r\n            this._callback = callback;\r\n            this._errorback = errorback;\r\n            this.moduleIdResolver = moduleIdResolver;\r\n            this.exports = {};\r\n            this.exportsPassedIn = false;\r\n            this.unresolvedDependenciesCount = this.dependencies.length;\r\n            this._isComplete = false;\r\n        }\r\n        Module._safeInvokeFunction = function (callback, args) {\r\n            try {\r\n                return {\r\n                    returnedValue: callback.apply(AMDLoader.global, args),\r\n                    producedError: null\r\n                };\r\n            }\r\n            catch (e) {\r\n                return {\r\n                    returnedValue: null,\r\n                    producedError: e\r\n                };\r\n            }\r\n        };\r\n        Module._invokeFactory = function (config, strModuleId, callback, dependenciesValues) {\r\n            if (config.isBuild() && !AMDLoader.Utilities.isAnonymousModule(strModuleId)) {\r\n                return {\r\n                    returnedValue: null,\r\n                    producedError: null\r\n                };\r\n            }\r\n            if (config.shouldCatchError()) {\r\n                return this._safeInvokeFunction(callback, dependenciesValues);\r\n            }\r\n            return {\r\n                returnedValue: callback.apply(AMDLoader.global, dependenciesValues),\r\n                producedError: null\r\n            };\r\n        };\r\n        Module.prototype.complete = function (recorder, config, dependenciesValues) {\r\n            this._isComplete = true;\r\n            var producedError = null;\r\n            if (this._callback) {\r\n                if (typeof this._callback === 'function') {\r\n                    recorder.record(21 /* BeginInvokeFactory */, this.strId);\r\n                    var r = Module._invokeFactory(config, this.strId, this._callback, dependenciesValues);\r\n                    producedError = r.producedError;\r\n                    recorder.record(22 /* EndInvokeFactory */, this.strId);\r\n                    if (!producedError && typeof r.returnedValue !== 'undefined' && (!this.exportsPassedIn || AMDLoader.Utilities.isEmpty(this.exports))) {\r\n                        this.exports = r.returnedValue;\r\n                    }\r\n                }\r\n                else {\r\n                    this.exports = this._callback;\r\n                }\r\n            }\r\n            if (producedError) {\r\n                config.onError({\r\n                    errorCode: 'factory',\r\n                    moduleId: this.strId,\r\n                    detail: producedError\r\n                });\r\n            }\r\n            this.dependencies = null;\r\n            this._callback = null;\r\n            this._errorback = null;\r\n            this.moduleIdResolver = null;\r\n        };\r\n        /**\r\n         * One of the direct dependencies or a transitive dependency has failed to load.\r\n         */\r\n        Module.prototype.onDependencyError = function (err) {\r\n            if (this._errorback) {\r\n                this._errorback(err);\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        /**\r\n         * Is the current module complete?\r\n         */\r\n        Module.prototype.isComplete = function () {\r\n            return this._isComplete;\r\n        };\r\n        return Module;\r\n    }());\r\n    AMDLoader.Module = Module;\r\n    var ModuleIdProvider = (function () {\r\n        function ModuleIdProvider() {\r\n            this._nextId = 0;\r\n            this._strModuleIdToIntModuleId = new Map();\r\n            this._intModuleIdToStrModuleId = [];\r\n            // Ensure values 0, 1, 2 are assigned accordingly with ModuleId\r\n            this.getModuleId('exports');\r\n            this.getModuleId('module');\r\n            this.getModuleId('require');\r\n        }\r\n        ModuleIdProvider.prototype.getMaxModuleId = function () {\r\n            return this._nextId;\r\n        };\r\n        ModuleIdProvider.prototype.getModuleId = function (strModuleId) {\r\n            var id = this._strModuleIdToIntModuleId.get(strModuleId);\r\n            if (typeof id === 'undefined') {\r\n                id = this._nextId++;\r\n                this._strModuleIdToIntModuleId.set(strModuleId, id);\r\n                this._intModuleIdToStrModuleId[id] = strModuleId;\r\n            }\r\n            return id;\r\n        };\r\n        ModuleIdProvider.prototype.getStrModuleId = function (moduleId) {\r\n            return this._intModuleIdToStrModuleId[moduleId];\r\n        };\r\n        return ModuleIdProvider;\r\n    }());\r\n    var RegularDependency = (function () {\r\n        function RegularDependency(id) {\r\n            this.id = id;\r\n        }\r\n        return RegularDependency;\r\n    }());\r\n    RegularDependency.EXPORTS = new RegularDependency(0 /* EXPORTS */);\r\n    RegularDependency.MODULE = new RegularDependency(1 /* MODULE */);\r\n    RegularDependency.REQUIRE = new RegularDependency(2 /* REQUIRE */);\r\n    AMDLoader.RegularDependency = RegularDependency;\r\n    var PluginDependency = (function () {\r\n        function PluginDependency(id, pluginId, pluginParam) {\r\n            this.id = id;\r\n            this.pluginId = pluginId;\r\n            this.pluginParam = pluginParam;\r\n        }\r\n        return PluginDependency;\r\n    }());\r\n    AMDLoader.PluginDependency = PluginDependency;\r\n    var ModuleManager = (function () {\r\n        function ModuleManager(env, scriptLoader, defineFunc, requireFunc, loaderAvailableTimestamp) {\r\n            if (loaderAvailableTimestamp === void 0) { loaderAvailableTimestamp = 0; }\r\n            this._env = env;\r\n            this._scriptLoader = scriptLoader;\r\n            this._loaderAvailableTimestamp = loaderAvailableTimestamp;\r\n            this._defineFunc = defineFunc;\r\n            this._requireFunc = requireFunc;\r\n            this._moduleIdProvider = new ModuleIdProvider();\r\n            this._config = new AMDLoader.Configuration(this._env);\r\n            this._modules2 = [];\r\n            this._knownModules2 = [];\r\n            this._inverseDependencies2 = [];\r\n            this._inversePluginDependencies2 = new Map();\r\n            this._currentAnnonymousDefineCall = null;\r\n            this._recorder = null;\r\n            this._buildInfoPath = [];\r\n            this._buildInfoDefineStack = [];\r\n            this._buildInfoDependencies = [];\r\n        }\r\n        ModuleManager.prototype.reset = function () {\r\n            return new ModuleManager(this._env, this._scriptLoader, this._defineFunc, this._requireFunc, this._loaderAvailableTimestamp);\r\n        };\r\n        ModuleManager.prototype.getGlobalAMDDefineFunc = function () {\r\n            return this._defineFunc;\r\n        };\r\n        ModuleManager.prototype.getGlobalAMDRequireFunc = function () {\r\n            return this._requireFunc;\r\n        };\r\n        ModuleManager._findRelevantLocationInStack = function (needle, stack) {\r\n            var normalize = function (str) { return str.replace(/\\\\/g, '/'); };\r\n            var normalizedPath = normalize(needle);\r\n            var stackPieces = stack.split(/\\n/);\r\n            for (var i = 0; i < stackPieces.length; i++) {\r\n                var m = stackPieces[i].match(/(.*):(\\d+):(\\d+)\\)?$/);\r\n                if (m) {\r\n                    var stackPath = m[1];\r\n                    var stackLine = m[2];\r\n                    var stackColumn = m[3];\r\n                    var trimPathOffset = Math.max(stackPath.lastIndexOf(' ') + 1, stackPath.lastIndexOf('(') + 1);\r\n                    stackPath = stackPath.substr(trimPathOffset);\r\n                    stackPath = normalize(stackPath);\r\n                    if (stackPath === normalizedPath) {\r\n                        var r = {\r\n                            line: parseInt(stackLine, 10),\r\n                            col: parseInt(stackColumn, 10)\r\n                        };\r\n                        if (r.line === 1) {\r\n                            r.col -= '(function (require, define, __filename, __dirname) { '.length;\r\n                        }\r\n                        return r;\r\n                    }\r\n                }\r\n            }\r\n            throw new Error('Could not correlate define call site for needle ' + needle);\r\n        };\r\n        ModuleManager.prototype.getBuildInfo = function () {\r\n            if (!this._config.isBuild()) {\r\n                return null;\r\n            }\r\n            var result = [], resultLen = 0;\r\n            for (var i = 0, len = this._modules2.length; i < len; i++) {\r\n                var m = this._modules2[i];\r\n                if (!m) {\r\n                    continue;\r\n                }\r\n                var location_1 = this._buildInfoPath[m.id] || null;\r\n                var defineStack = this._buildInfoDefineStack[m.id] || null;\r\n                var dependencies = this._buildInfoDependencies[m.id];\r\n                result[resultLen++] = {\r\n                    id: m.strId,\r\n                    path: location_1,\r\n                    defineLocation: (location_1 && defineStack ? ModuleManager._findRelevantLocationInStack(location_1, defineStack) : null),\r\n                    dependencies: dependencies,\r\n                    shim: null,\r\n                    exports: m.exports\r\n                };\r\n            }\r\n            return result;\r\n        };\r\n        ModuleManager.prototype.getRecorder = function () {\r\n            if (!this._recorder) {\r\n                if (this._config.shouldRecordStats()) {\r\n                    this._recorder = new AMDLoader.LoaderEventRecorder(this._loaderAvailableTimestamp);\r\n                }\r\n                else {\r\n                    this._recorder = AMDLoader.NullLoaderEventRecorder.INSTANCE;\r\n                }\r\n            }\r\n            return this._recorder;\r\n        };\r\n        ModuleManager.prototype.getLoaderEvents = function () {\r\n            return this.getRecorder().getEvents();\r\n        };\r\n        /**\r\n         * Defines an anonymous module (without an id). Its name will be resolved as we receive a callback from the scriptLoader.\r\n         * @param dependecies @see defineModule\r\n         * @param callback @see defineModule\r\n         */\r\n        ModuleManager.prototype.enqueueDefineAnonymousModule = function (dependencies, callback) {\r\n            if (this._currentAnnonymousDefineCall !== null) {\r\n                throw new Error('Can only have one anonymous define call per script file');\r\n            }\r\n            var stack = null;\r\n            if (this._config.isBuild()) {\r\n                stack = new Error('StackLocation').stack;\r\n            }\r\n            this._currentAnnonymousDefineCall = {\r\n                stack: stack,\r\n                dependencies: dependencies,\r\n                callback: callback\r\n            };\r\n        };\r\n        /**\r\n         * Creates a module and stores it in _modules. The manager will immediately begin resolving its dependencies.\r\n         * @param strModuleId An unique and absolute id of the module. This must not collide with another module's id\r\n         * @param dependencies An array with the dependencies of the module. Special keys are: \"require\", \"exports\" and \"module\"\r\n         * @param callback if callback is a function, it will be called with the resolved dependencies. if callback is an object, it will be considered as the exports of the module.\r\n         */\r\n        ModuleManager.prototype.defineModule = function (strModuleId, dependencies, callback, errorback, stack, moduleIdResolver) {\r\n            var _this = this;\r\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(strModuleId); }\r\n            var moduleId = this._moduleIdProvider.getModuleId(strModuleId);\r\n            if (this._modules2[moduleId]) {\r\n                if (!this._config.isDuplicateMessageIgnoredFor(strModuleId)) {\r\n                    console.warn('Duplicate definition of module \\'' + strModuleId + '\\'');\r\n                }\r\n                // Super important! Completely ignore duplicate module definition\r\n                return;\r\n            }\r\n            var m = new Module(moduleId, strModuleId, this._normalizeDependencies(dependencies, moduleIdResolver), callback, errorback, moduleIdResolver);\r\n            this._modules2[moduleId] = m;\r\n            if (this._config.isBuild()) {\r\n                this._buildInfoDefineStack[moduleId] = stack;\r\n                this._buildInfoDependencies[moduleId] = m.dependencies.map(function (dep) { return _this._moduleIdProvider.getStrModuleId(dep.id); });\r\n            }\r\n            // Resolving of dependencies is immediate (not in a timeout). If there's a need to support a packer that concatenates in an\r\n            // unordered manner, in order to finish processing the file, execute the following method in a timeout\r\n            this._resolve(m);\r\n        };\r\n        ModuleManager.prototype._normalizeDependency = function (dependency, moduleIdResolver) {\r\n            if (dependency === 'exports') {\r\n                return RegularDependency.EXPORTS;\r\n            }\r\n            if (dependency === 'module') {\r\n                return RegularDependency.MODULE;\r\n            }\r\n            if (dependency === 'require') {\r\n                return RegularDependency.REQUIRE;\r\n            }\r\n            // Normalize dependency and then request it from the manager\r\n            var bangIndex = dependency.indexOf('!');\r\n            if (bangIndex >= 0) {\r\n                var strPluginId = moduleIdResolver.resolveModule(dependency.substr(0, bangIndex));\r\n                var pluginParam = moduleIdResolver.resolveModule(dependency.substr(bangIndex + 1));\r\n                var dependencyId = this._moduleIdProvider.getModuleId(strPluginId + '!' + pluginParam);\r\n                var pluginId = this._moduleIdProvider.getModuleId(strPluginId);\r\n                return new PluginDependency(dependencyId, pluginId, pluginParam);\r\n            }\r\n            return new RegularDependency(this._moduleIdProvider.getModuleId(moduleIdResolver.resolveModule(dependency)));\r\n        };\r\n        ModuleManager.prototype._normalizeDependencies = function (dependencies, moduleIdResolver) {\r\n            var result = [], resultLen = 0;\r\n            for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                result[resultLen++] = this._normalizeDependency(dependencies[i], moduleIdResolver);\r\n            }\r\n            return result;\r\n        };\r\n        ModuleManager.prototype._relativeRequire = function (moduleIdResolver, dependencies, callback, errorback) {\r\n            if (typeof dependencies === 'string') {\r\n                return this.synchronousRequire(dependencies, moduleIdResolver);\r\n            }\r\n            this.defineModule(AMDLoader.Utilities.generateAnonymousModule(), dependencies, callback, errorback, null, moduleIdResolver);\r\n        };\r\n        /**\r\n         * Require synchronously a module by its absolute id. If the module is not loaded, an exception will be thrown.\r\n         * @param id The unique and absolute id of the required module\r\n         * @return The exports of module 'id'\r\n         */\r\n        ModuleManager.prototype.synchronousRequire = function (_strModuleId, moduleIdResolver) {\r\n            if (moduleIdResolver === void 0) { moduleIdResolver = new ModuleIdResolver(_strModuleId); }\r\n            var dependency = this._normalizeDependency(_strModuleId, moduleIdResolver);\r\n            var m = this._modules2[dependency.id];\r\n            if (!m) {\r\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This is the first mention of this module!');\r\n            }\r\n            if (!m.isComplete()) {\r\n                throw new Error('Check dependency list! Synchronous require cannot resolve module \\'' + _strModuleId + '\\'. This module has not been resolved completely yet.');\r\n            }\r\n            return m.exports;\r\n        };\r\n        ModuleManager.prototype.configure = function (params, shouldOverwrite) {\r\n            var oldShouldRecordStats = this._config.shouldRecordStats();\r\n            if (shouldOverwrite) {\r\n                this._config = new AMDLoader.Configuration(this._env, params);\r\n            }\r\n            else {\r\n                this._config = this._config.cloneAndMerge(params);\r\n            }\r\n            if (this._config.shouldRecordStats() && !oldShouldRecordStats) {\r\n                this._recorder = null;\r\n            }\r\n        };\r\n        ModuleManager.prototype.getConfig = function () {\r\n            return this._config;\r\n        };\r\n        /**\r\n         * Callback from the scriptLoader when a module has been loaded.\r\n         * This means its code is available and has been executed.\r\n         */\r\n        ModuleManager.prototype._onLoad = function (moduleId) {\r\n            if (this._currentAnnonymousDefineCall !== null) {\r\n                var defineCall = this._currentAnnonymousDefineCall;\r\n                this._currentAnnonymousDefineCall = null;\r\n                // Hit an anonymous define call\r\n                this.defineModule(this._moduleIdProvider.getStrModuleId(moduleId), defineCall.dependencies, defineCall.callback, null, defineCall.stack);\r\n            }\r\n        };\r\n        ModuleManager.prototype._createLoadError = function (moduleId, err) {\r\n            var _this = this;\r\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\r\n            var neededBy = (this._inverseDependencies2[moduleId] || []).map(function (intModuleId) { return _this._moduleIdProvider.getStrModuleId(intModuleId); });\r\n            return {\r\n                errorCode: 'load',\r\n                moduleId: strModuleId,\r\n                neededBy: neededBy,\r\n                detail: err\r\n            };\r\n        };\r\n        /**\r\n         * Callback from the scriptLoader when a module hasn't been loaded.\r\n         * This means that the script was not found (e.g. 404) or there was an error in the script.\r\n         */\r\n        ModuleManager.prototype._onLoadError = function (moduleId, err) {\r\n            var error = this._createLoadError(moduleId, err);\r\n            // Find any 'local' error handlers, walk the entire chain of inverse dependencies if necessary.\r\n            var seenModuleId = [];\r\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\r\n                seenModuleId[i] = false;\r\n            }\r\n            var someoneNotified = false;\r\n            var queue = [];\r\n            queue.push(moduleId);\r\n            seenModuleId[moduleId] = true;\r\n            while (queue.length > 0) {\r\n                var queueElement = queue.shift();\r\n                var m = this._modules2[queueElement];\r\n                if (m) {\r\n                    someoneNotified = m.onDependencyError(error) || someoneNotified;\r\n                }\r\n                var inverseDeps = this._inverseDependencies2[queueElement];\r\n                if (inverseDeps) {\r\n                    for (var i = 0, len = inverseDeps.length; i < len; i++) {\r\n                        var inverseDep = inverseDeps[i];\r\n                        if (!seenModuleId[inverseDep]) {\r\n                            queue.push(inverseDep);\r\n                            seenModuleId[inverseDep] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!someoneNotified) {\r\n                this._config.onError(error);\r\n            }\r\n        };\r\n        /**\r\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\r\n         * Returns true if there is such a path or false otherwise.\r\n         * @param from Module id to start at\r\n         * @param to Module id to look for\r\n         */\r\n        ModuleManager.prototype._hasDependencyPath = function (fromId, toId) {\r\n            var from = this._modules2[fromId];\r\n            if (!from) {\r\n                return false;\r\n            }\r\n            var inQueue = [];\r\n            for (var i = 0, len = this._moduleIdProvider.getMaxModuleId(); i < len; i++) {\r\n                inQueue[i] = false;\r\n            }\r\n            var queue = [];\r\n            // Insert 'from' in queue\r\n            queue.push(from);\r\n            inQueue[fromId] = true;\r\n            while (queue.length > 0) {\r\n                // Pop first inserted element of queue\r\n                var element = queue.shift();\r\n                var dependencies = element.dependencies;\r\n                if (dependencies) {\r\n                    // Walk the element's dependencies\r\n                    for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                        var dependency = dependencies[i];\r\n                        if (dependency.id === toId) {\r\n                            // There is a path to 'to'\r\n                            return true;\r\n                        }\r\n                        var dependencyModule = this._modules2[dependency.id];\r\n                        if (dependencyModule && !inQueue[dependency.id]) {\r\n                            // Insert 'dependency' in queue\r\n                            inQueue[dependency.id] = true;\r\n                            queue.push(dependencyModule);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // There is no path to 'to'\r\n            return false;\r\n        };\r\n        /**\r\n         * Walks (recursively) the dependencies of 'from' in search of 'to'.\r\n         * Returns cycle as array.\r\n         * @param from Module id to start at\r\n         * @param to Module id to look for\r\n         */\r\n        ModuleManager.prototype._findCyclePath = function (fromId, toId, depth) {\r\n            if (fromId === toId || depth === 50) {\r\n                return [fromId];\r\n            }\r\n            var from = this._modules2[fromId];\r\n            if (!from) {\r\n                return null;\r\n            }\r\n            // Walk the element's dependencies\r\n            var dependencies = from.dependencies;\r\n            for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                var path = this._findCyclePath(dependencies[i].id, toId, depth + 1);\r\n                if (path !== null) {\r\n                    path.push(fromId);\r\n                    return path;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        /**\r\n         * Create the local 'require' that is passed into modules\r\n         */\r\n        ModuleManager.prototype._createRequire = function (moduleIdResolver) {\r\n            var _this = this;\r\n            var result = (function (dependencies, callback, errorback) {\r\n                return _this._relativeRequire(moduleIdResolver, dependencies, callback, errorback);\r\n            });\r\n            result.toUrl = function (id) {\r\n                return _this._config.requireToUrl(moduleIdResolver.resolveModule(id));\r\n            };\r\n            result.getStats = function () {\r\n                return _this.getLoaderEvents();\r\n            };\r\n            result.__$__nodeRequire = AMDLoader.global.nodeRequire;\r\n            return result;\r\n        };\r\n        ModuleManager.prototype._loadModule = function (moduleId) {\r\n            var _this = this;\r\n            if (this._modules2[moduleId] || this._knownModules2[moduleId]) {\r\n                // known module\r\n                return;\r\n            }\r\n            this._knownModules2[moduleId] = true;\r\n            var strModuleId = this._moduleIdProvider.getStrModuleId(moduleId);\r\n            var paths = this._config.moduleIdToPaths(strModuleId);\r\n            var scopedPackageRegex = /^@[^\\/]+\\/[^\\/]+$/; // matches @scope/package-name\r\n            if (this._env.isNode && (strModuleId.indexOf('/') === -1 || scopedPackageRegex.test(strModuleId))) {\r\n                paths.push('node|' + strModuleId);\r\n            }\r\n            var lastPathIndex = -1;\r\n            var loadNextPath = function (err) {\r\n                lastPathIndex++;\r\n                if (lastPathIndex >= paths.length) {\r\n                    // No more paths to try\r\n                    _this._onLoadError(moduleId, err);\r\n                }\r\n                else {\r\n                    var currentPath_1 = paths[lastPathIndex];\r\n                    var recorder_1 = _this.getRecorder();\r\n                    if (_this._config.isBuild() && currentPath_1 === 'empty:') {\r\n                        _this._buildInfoPath[moduleId] = currentPath_1;\r\n                        _this.defineModule(_this._moduleIdProvider.getStrModuleId(moduleId), [], null, null, null);\r\n                        _this._onLoad(moduleId);\r\n                        return;\r\n                    }\r\n                    recorder_1.record(10 /* BeginLoadingScript */, currentPath_1);\r\n                    _this._scriptLoader.load(_this, currentPath_1, function () {\r\n                        if (_this._config.isBuild()) {\r\n                            _this._buildInfoPath[moduleId] = currentPath_1;\r\n                        }\r\n                        recorder_1.record(11 /* EndLoadingScriptOK */, currentPath_1);\r\n                        _this._onLoad(moduleId);\r\n                    }, function (err) {\r\n                        recorder_1.record(12 /* EndLoadingScriptError */, currentPath_1);\r\n                        loadNextPath(err);\r\n                    });\r\n                }\r\n            };\r\n            loadNextPath(null);\r\n        };\r\n        /**\r\n         * Resolve a plugin dependency with the plugin loaded & complete\r\n         * @param module The module that has this dependency\r\n         * @param pluginDependency The semi-normalized dependency that appears in the module. e.g. 'vs/css!./mycssfile'. Only the plugin part (before !) is normalized\r\n         * @param plugin The plugin (what the plugin exports)\r\n         */\r\n        ModuleManager.prototype._loadPluginDependency = function (plugin, pluginDependency) {\r\n            var _this = this;\r\n            if (this._modules2[pluginDependency.id] || this._knownModules2[pluginDependency.id]) {\r\n                // known module\r\n                return;\r\n            }\r\n            this._knownModules2[pluginDependency.id] = true;\r\n            // Delegate the loading of the resource to the plugin\r\n            var load = (function (value) {\r\n                _this.defineModule(_this._moduleIdProvider.getStrModuleId(pluginDependency.id), [], value, null, null);\r\n            });\r\n            load.error = function (err) {\r\n                _this._config.onError(_this._createLoadError(pluginDependency.id, err));\r\n            };\r\n            plugin.load(pluginDependency.pluginParam, this._createRequire(ModuleIdResolver.ROOT), load, this._config.getOptionsLiteral());\r\n        };\r\n        /**\r\n         * Examine the dependencies of module 'module' and resolve them as needed.\r\n         */\r\n        ModuleManager.prototype._resolve = function (module) {\r\n            var _this = this;\r\n            var dependencies = module.dependencies;\r\n            for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                var dependency = dependencies[i];\r\n                if (dependency === RegularDependency.EXPORTS) {\r\n                    module.exportsPassedIn = true;\r\n                    module.unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                if (dependency === RegularDependency.MODULE) {\r\n                    module.unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                if (dependency === RegularDependency.REQUIRE) {\r\n                    module.unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                var dependencyModule = this._modules2[dependency.id];\r\n                if (dependencyModule && dependencyModule.isComplete()) {\r\n                    module.unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                if (this._hasDependencyPath(dependency.id, module.id)) {\r\n                    console.warn('There is a dependency cycle between \\'' + this._moduleIdProvider.getStrModuleId(dependency.id) + '\\' and \\'' + this._moduleIdProvider.getStrModuleId(module.id) + '\\'. The cyclic path follows:');\r\n                    var cyclePath = this._findCyclePath(dependency.id, module.id, 0);\r\n                    cyclePath.reverse();\r\n                    cyclePath.push(dependency.id);\r\n                    console.warn(cyclePath.map(function (id) { return _this._moduleIdProvider.getStrModuleId(id); }).join(' => \\n'));\r\n                    // Break the cycle\r\n                    module.unresolvedDependenciesCount--;\r\n                    continue;\r\n                }\r\n                // record inverse dependency\r\n                this._inverseDependencies2[dependency.id] = this._inverseDependencies2[dependency.id] || [];\r\n                this._inverseDependencies2[dependency.id].push(module.id);\r\n                if (dependency instanceof PluginDependency) {\r\n                    var plugin = this._modules2[dependency.pluginId];\r\n                    if (plugin && plugin.isComplete()) {\r\n                        this._loadPluginDependency(plugin.exports, dependency);\r\n                        continue;\r\n                    }\r\n                    // Record dependency for when the plugin gets loaded\r\n                    var inversePluginDeps = this._inversePluginDependencies2.get(dependency.pluginId);\r\n                    if (!inversePluginDeps) {\r\n                        inversePluginDeps = [];\r\n                        this._inversePluginDependencies2.set(dependency.pluginId, inversePluginDeps);\r\n                    }\r\n                    inversePluginDeps.push(dependency);\r\n                    this._loadModule(dependency.pluginId);\r\n                    continue;\r\n                }\r\n                this._loadModule(dependency.id);\r\n            }\r\n            if (module.unresolvedDependenciesCount === 0) {\r\n                this._onModuleComplete(module);\r\n            }\r\n        };\r\n        ModuleManager.prototype._onModuleComplete = function (module) {\r\n            var _this = this;\r\n            var recorder = this.getRecorder();\r\n            if (module.isComplete()) {\r\n                // already done\r\n                return;\r\n            }\r\n            var dependencies = module.dependencies;\r\n            var dependenciesValues = [];\r\n            for (var i = 0, len = dependencies.length; i < len; i++) {\r\n                var dependency = dependencies[i];\r\n                if (dependency === RegularDependency.EXPORTS) {\r\n                    dependenciesValues[i] = module.exports;\r\n                    continue;\r\n                }\r\n                if (dependency === RegularDependency.MODULE) {\r\n                    dependenciesValues[i] = {\r\n                        id: module.strId,\r\n                        config: function () {\r\n                            return _this._config.getConfigForModule(module.strId);\r\n                        }\r\n                    };\r\n                    continue;\r\n                }\r\n                if (dependency === RegularDependency.REQUIRE) {\r\n                    dependenciesValues[i] = this._createRequire(module.moduleIdResolver);\r\n                    continue;\r\n                }\r\n                var dependencyModule = this._modules2[dependency.id];\r\n                if (dependencyModule) {\r\n                    dependenciesValues[i] = dependencyModule.exports;\r\n                    continue;\r\n                }\r\n                dependenciesValues[i] = null;\r\n            }\r\n            module.complete(recorder, this._config, dependenciesValues);\r\n            // Fetch and clear inverse dependencies\r\n            var inverseDeps = this._inverseDependencies2[module.id];\r\n            this._inverseDependencies2[module.id] = null;\r\n            if (inverseDeps) {\r\n                // Resolve one inverse dependency at a time, always\r\n                // on the lookout for a completed module.\r\n                for (var i = 0, len = inverseDeps.length; i < len; i++) {\r\n                    var inverseDependencyId = inverseDeps[i];\r\n                    var inverseDependency = this._modules2[inverseDependencyId];\r\n                    inverseDependency.unresolvedDependenciesCount--;\r\n                    if (inverseDependency.unresolvedDependenciesCount === 0) {\r\n                        this._onModuleComplete(inverseDependency);\r\n                    }\r\n                }\r\n            }\r\n            var inversePluginDeps = this._inversePluginDependencies2.get(module.id);\r\n            if (inversePluginDeps) {\r\n                // This module is used as a plugin at least once\r\n                // Fetch and clear these inverse plugin dependencies\r\n                this._inversePluginDependencies2.delete(module.id);\r\n                // Resolve plugin dependencies one at a time\r\n                for (var i = 0, len = inversePluginDeps.length; i < len; i++) {\r\n                    this._loadPluginDependency(module.exports, inversePluginDeps[i]);\r\n                }\r\n            }\r\n        };\r\n        return ModuleManager;\r\n    }());\r\n    AMDLoader.ModuleManager = ModuleManager;\r\n})(AMDLoader || (AMDLoader = {}));\r\nvar define;\r\nvar AMDLoader;\r\n(function (AMDLoader) {\r\n    var env = new AMDLoader.Environment();\r\n    var moduleManager = null;\r\n    var DefineFunc = function (id, dependencies, callback) {\r\n        if (typeof id !== 'string') {\r\n            callback = dependencies;\r\n            dependencies = id;\r\n            id = null;\r\n        }\r\n        if (typeof dependencies !== 'object' || !Array.isArray(dependencies)) {\r\n            callback = dependencies;\r\n            dependencies = null;\r\n        }\r\n        if (!dependencies) {\r\n            dependencies = ['require', 'exports', 'module'];\r\n        }\r\n        if (id) {\r\n            moduleManager.defineModule(id, dependencies, callback, null, null);\r\n        }\r\n        else {\r\n            moduleManager.enqueueDefineAnonymousModule(dependencies, callback);\r\n        }\r\n    };\r\n    DefineFunc.amd = {\r\n        jQuery: true\r\n    };\r\n    var _requireFunc_config = function (params, shouldOverwrite) {\r\n        if (shouldOverwrite === void 0) { shouldOverwrite = false; }\r\n        moduleManager.configure(params, shouldOverwrite);\r\n    };\r\n    var RequireFunc = function () {\r\n        if (arguments.length === 1) {\r\n            if ((arguments[0] instanceof Object) && !Array.isArray(arguments[0])) {\r\n                _requireFunc_config(arguments[0]);\r\n                return;\r\n            }\r\n            if (typeof arguments[0] === 'string') {\r\n                return moduleManager.synchronousRequire(arguments[0]);\r\n            }\r\n        }\r\n        if (arguments.length === 2 || arguments.length === 3) {\r\n            if (Array.isArray(arguments[0])) {\r\n                moduleManager.defineModule(AMDLoader.Utilities.generateAnonymousModule(), arguments[0], arguments[1], arguments[2], null);\r\n                return;\r\n            }\r\n        }\r\n        throw new Error('Unrecognized require call');\r\n    };\r\n    RequireFunc.config = _requireFunc_config;\r\n    RequireFunc.getConfig = function () {\r\n        return moduleManager.getConfig().getOptionsLiteral();\r\n    };\r\n    RequireFunc.reset = function () {\r\n        moduleManager = moduleManager.reset();\r\n    };\r\n    RequireFunc.getBuildInfo = function () {\r\n        return moduleManager.getBuildInfo();\r\n    };\r\n    RequireFunc.getStats = function () {\r\n        return moduleManager.getLoaderEvents();\r\n    };\r\n    RequireFunc.define = function () {\r\n        return DefineFunc.apply(null, arguments);\r\n    };\r\n    function init() {\r\n        if (typeof AMDLoader.global.require !== 'undefined' || typeof require !== 'undefined') {\r\n            var _nodeRequire_1 = (AMDLoader.global.require || require);\r\n            if (typeof _nodeRequire_1 === 'function' && typeof _nodeRequire_1.resolve === 'function') {\r\n                // re-expose node's require function\r\n                var nodeRequire = function (what) {\r\n                    moduleManager.getRecorder().record(33 /* NodeBeginNativeRequire */, what);\r\n                    try {\r\n                        return _nodeRequire_1(what);\r\n                    }\r\n                    finally {\r\n                        moduleManager.getRecorder().record(34 /* NodeEndNativeRequire */, what);\r\n                    }\r\n                };\r\n                AMDLoader.global.nodeRequire = nodeRequire;\r\n                RequireFunc.nodeRequire = nodeRequire;\r\n                RequireFunc.__$__nodeRequire = nodeRequire;\r\n            }\r\n        }\r\n        if (env.isNode && !env.isElectronRenderer) {\r\n            module.exports = RequireFunc;\r\n            require = RequireFunc;\r\n        }\r\n        else {\r\n            if (!env.isElectronRenderer) {\r\n                AMDLoader.global.define = DefineFunc;\r\n            }\r\n            AMDLoader.global.require = RequireFunc;\r\n        }\r\n    }\r\n    AMDLoader.init = init;\r\n    if (typeof AMDLoader.global.define !== 'function' || !AMDLoader.global.define.amd) {\r\n        moduleManager = new AMDLoader.ModuleManager(env, AMDLoader.createScriptLoader(env), DefineFunc, RequireFunc, AMDLoader.Utilities.getHighPerformanceTimestamp());\r\n        // The global variable require can configure the loader\r\n        if (typeof AMDLoader.global.require !== 'undefined' && typeof AMDLoader.global.require !== 'function') {\r\n            RequireFunc.config(AMDLoader.global.require);\r\n        }\r\n        // This define is for the local closure defined in node in the case that the loader is concatenated\r\n        define = function () {\r\n            return DefineFunc.apply(null, arguments);\r\n        };\r\n        define.amd = DefineFunc.amd;\r\n        if (typeof doNotInitLoader === 'undefined') {\r\n            init();\r\n        }\r\n    }\r\n})(AMDLoader || (AMDLoader = {}));\r\n"]}